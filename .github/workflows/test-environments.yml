name: Test Environments

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  test-matrix:
    name: Test Matrix
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [18.x, 20.x, 22.x]
        exclude:
          # Reduce matrix size for efficiency
          - os: windows-latest
            node-version: 18.x
          - os: macos-latest
            node-version: 18.x

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run tests
        run: pnpm test
        env:
          NODE_ENV: test

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}-node${{ matrix.node-version }}
          path: |
            coverage/
            test-results.xml
          retention-days: 7

  test-with-localstack:
    name: Integration Tests with LocalStack
    runs-on: ubuntu-latest

    services:
      localstack:
        image: localstack/localstack:latest
        ports:
          - 4566:4566
        env:
          SERVICES: s3,sqs,dynamodb
          DEBUG: 0
          PERSISTENCE: 0
          LS_LOG: warn
        options: >-
          --health-cmd="curl -s http://localhost:4566/_localstack/health | grep -q '\"s3\": \"available\"' || exit 1"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=12

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Wait for LocalStack
        run: |
          echo "Waiting for LocalStack to be ready..."
          for i in {1..30}; do
            if curl -s http://localhost:4566/_localstack/health | grep -q '"s3": "available"'; then
              echo "‚úÖ LocalStack is ready!"
              curl -s http://localhost:4566/_localstack/health | jq .
              break
            fi
            echo "‚è≥ Attempt $i/30: LocalStack not ready yet, waiting..."
            sleep 3
          done
          
          # Final check
          curl -s http://localhost:4566/_localstack/health || exit 1

      - name: Setup LocalStack resources
        run: |
          # Create S3 bucket
          aws --endpoint-url=http://localhost:4566 s3 mb s3://test-bucket || true

          # Create DynamoDB table
          aws --endpoint-url=http://localhost:4566 dynamodb create-table \
            --table-name Jobs \
            --attribute-definitions AttributeName=id,AttributeType=S \
            --key-schema AttributeName=id,KeyType=HASH \
            --billing-mode PAY_PER_REQUEST || true
            
          # Create SQS queue
          aws --endpoint-url=http://localhost:4566 sqs create-queue \
            --queue-name file-processing-queue || true
        env:
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test
          AWS_DEFAULT_REGION: us-east-1

      - name: Run integration tests
        run: pnpm run test:integration
        env:
          NODE_ENV: test
          AWS_ENDPOINT_URL: http://localhost:4566
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test
          AWS_DEFAULT_REGION: us-east-1
          S3_BUCKET_NAME: test-bucket
          DYNAMODB_TABLE_NAME: Jobs
          SQS_QUEUE_URL: http://localhost:4566/000000000000/file-processing-queue

  test-docker:
    name: Test in Docker
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build test image
        run: |
          cat > Dockerfile.test << EOF
          FROM node:20-alpine

          WORKDIR /app

          # Install system dependencies
          RUN apk add --no-cache \
              curl \
              git \
              python3 \
              make \
              g++

          # Copy package files
          COPY package*.json pnpm-lock.yaml ./

          # Install pnpm
          RUN corepack enable && corepack prepare pnpm@latest --activate

          # Create empty .env.local to avoid postinstall script failure
          RUN touch .env.local

          # Install dependencies
          RUN pnpm install --frozen-lockfile

          # Copy source code
          COPY . .

          # Run tests
          CMD ["pnpm", "test"]
          EOF

          docker build -f Dockerfile.test -t cloud-tools-test .

      - name: Run tests in Docker
        run: |
          docker run --rm \
            -e NODE_ENV=test \
            -e CI=true \
            cloud-tools-test

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run performance tests
        run: |
          # Run tests with timing information and capture output
          start_time=$(date +%s%3N)
          pnpm test -- --run
          end_time=$(date +%s%3N)

          # Calculate test duration
          DURATION=$((end_time - start_time))

          echo "üìä Test Performance Summary:"
          echo "Total time: ${DURATION}ms"

          # Store duration for next step
          echo "$DURATION" > test-duration.txt

      - name: Check test performance
        run: |
          # Fail if tests take longer than 30 seconds
          DURATION=$(cat test-duration.txt)
          if [ $DURATION -gt 30000 ]; then
            echo "‚ùå Tests are too slow: ${DURATION}ms (max: 30000ms)"
            exit 1
          else
            echo "‚úÖ Test performance is acceptable: ${DURATION}ms"
          fi

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test-matrix, test-with-localstack, test-docker]
    if: always() && github.event_name == 'push' && github.ref == 'refs/heads/master'

    steps:
      - name: Send notification
        if: failure()
        run: |
          echo "üö® Test failures detected in main branch!"
          echo "Matrix tests: ${{ needs.test-matrix.result }}"
          echo "LocalStack tests: ${{ needs.test-with-localstack.result }}"
          echo "Docker tests: ${{ needs.test-docker.result }}"
          # Add your notification logic here (Slack, email, etc.)
