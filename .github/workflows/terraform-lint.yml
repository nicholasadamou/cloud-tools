name: Terraform Linting & Validation

on:
  push:
    branches: [master]
    paths:
      - 'terraform/**/*.tf'
      - 'terraform/**/*.tfvars'
      - '.github/workflows/terraform-lint.yml'
  pull_request:
    branches: [master]
    paths:
      - 'terraform/**/*.tf'
      - 'terraform/**/*.tfvars'
      - '.github/workflows/terraform-lint.yml'

env:
  TF_VERSION: '1.6.0'
  TFLINT_VERSION: 'v0.48.0'

jobs:
  terraform-fmt:
    name: Terraform Format Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format Check
        run: |
          echo "üé® Checking Terraform file formatting..."

          # Check if all .tf files are properly formatted
          if ! terraform fmt -check -recursive terraform/; then
            echo "‚ùå Terraform files are not properly formatted!"
            echo ""
            echo "Files that need formatting:"
            terraform fmt -check -recursive -diff terraform/
            echo ""
            echo "To fix, run: terraform fmt -recursive terraform/"
            exit 1
          else
            echo "‚úÖ All Terraform files are properly formatted!"
          fi

  terraform-validate:
    name: Terraform Validate
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [dev, production]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Create Lambda build artifacts for validation
        run: |
          echo "üì¶ Creating dummy Lambda zip files for validation..."
          mkdir -p terraform/modules/lambda/.build/lambda

          # Create empty zip files to satisfy validation
          cd terraform/modules/lambda/.build/lambda
          echo "console.log('dummy');" > dummy.js
          zip -q convert-lambda.zip dummy.js
          zip -q compress-lambda.zip dummy.js
          zip -q process-lambda.zip dummy.js
          rm dummy.js

          echo "‚úÖ Created dummy Lambda packages for validation"

      - name: Terraform Init
        run: |
          echo "üîß Initializing Terraform for ${{ matrix.environment }}..."
          cd terraform/environments/${{ matrix.environment }}

          # Create a temporary backend config for validation
          cat > backend-temp.tf << EOF
          terraform {
            backend "local" {
              path = "terraform.tfstate"
            }
          }
          EOF

          terraform init -backend=false

      - name: Terraform Validate
        run: |
          echo "‚úÖ Validating Terraform configuration for ${{ matrix.environment }}..."
          cd terraform/environments/${{ matrix.environment }}

          if terraform validate; then
            echo "‚úÖ Terraform configuration is valid for ${{ matrix.environment }}!"
          else
            echo "‚ùå Terraform validation failed for ${{ matrix.environment }}!"
            exit 1
          fi

      - name: Cleanup
        if: always()
        run: |
          cd terraform/environments/${{ matrix.environment }}
          rm -f backend-temp.tf .terraform.lock.hcl
          rm -rf .terraform/

  tflint:
    name: TFLint Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache TFLint plugins
        uses: actions/cache@v3
        with:
          path: ~/.tflint.d/plugins
          key: tflint-${{ hashFiles('terraform/.tflint.hcl') }}

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: ${{ env.TFLINT_VERSION }}

      - name: Show TFLint version
        run: tflint --version

      - name: Initialize TFLint
        run: |
          cd terraform
          tflint --init

      - name: Run TFLint on modules
        run: |
          echo "üîç Running TFLint on Terraform modules..."

          # Initialize counters
          total_modules=0
          passed_modules=0
          failed_modules=0

          # Create results directory
          mkdir -p tflint-results

          # Lint each module
          for module_dir in terraform/modules/*/; do
            if [[ -d "$module_dir" ]]; then
              module_name=$(basename "$module_dir")
              echo "üìÑ Linting module: $module_name"
              total_modules=$((total_modules + 1))
              
              if tflint --chdir="$module_dir" > "tflint-results/$module_name.txt" 2>&1; then
                echo "‚úÖ $module_name - PASSED"
                passed_modules=$((passed_modules + 1))
              else
                echo "‚ùå $module_name - FAILED"
                failed_modules=$((failed_modules + 1))
                echo "Error details:"
                cat "tflint-results/$module_name.txt"
                echo ""
              fi
            fi
          done

          # Lint environments
          for env_dir in terraform/environments/*/; do
            if [[ -d "$env_dir" ]]; then
              env_name=$(basename "$env_dir")
              echo "üìÑ Linting environment: $env_name"
              total_modules=$((total_modules + 1))
              
              if tflint --chdir="$env_dir" > "tflint-results/$env_name.txt" 2>&1; then
                echo "‚úÖ $env_name - PASSED"
                passed_modules=$((passed_modules + 1))
              else
                echo "‚ùå $env_name - FAILED"
                failed_modules=$((failed_modules + 1))
                echo "Error details:"
                cat "tflint-results/$env_name.txt"
                echo ""
              fi
            fi
          done

          # Summary
          echo ""
          echo "üìä TFLint Summary:"
          echo "  Total modules/environments: $total_modules"
          echo "  Passed: $passed_modules"
          echo "  Failed: $failed_modules"

          # Set outputs for later steps
          echo "total_modules=$total_modules" >> $GITHUB_OUTPUT
          echo "passed_modules=$passed_modules" >> $GITHUB_OUTPUT
          echo "failed_modules=$failed_modules" >> $GITHUB_OUTPUT

          # Fail if any modules failed
          if [ $failed_modules -gt 0 ]; then
            echo "‚ùå TFLint found issues in $failed_modules module(s)"
            exit 1
          else
            echo "‚úÖ All Terraform modules passed TFLint validation!"
          fi

      - name: Upload TFLint results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: tflint-results
          path: tflint-results/
          retention-days: 7

  terraform-security:
    name: Terraform Security Scan
    runs-on: ubuntu-latest
    continue-on-error: true  # Make this step non-blocking

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Checkov
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: terraform/
          quiet: true
          soft_fail: true
          framework: terraform
          output_format: sarif
          download_external_modules: false

      - name: Upload Checkov results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif
          category: terraform-security

      - name: Security Scan Summary
        if: always()
        run: |
          echo "üîí Security Scan Complete"
          echo "‚ÑπÔ∏è  Security findings are informational and represent production hardening recommendations."
          echo "‚ÑπÔ∏è  These findings do not block the workflow but should be addressed for production deployments."
          echo "üìä Review security findings in the GitHub Security tab for detailed recommendations."

  terraform-docs:
    name: Terraform Documentation Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup terraform-docs
        run: |
          echo "üì• Installing terraform-docs..."
          curl -sSLo ./terraform-docs.tar.gz https://terraform-docs.io/dl/v0.17.0/terraform-docs-v0.17.0-$(uname)-amd64.tar.gz
          tar -xzf terraform-docs.tar.gz
          chmod +x terraform-docs
          sudo mv terraform-docs /usr/local/bin/
          terraform-docs --version

      - name: Check Terraform documentation
        run: |
          echo "üìö Checking Terraform documentation..."

          # Check if modules have proper documentation
          missing_docs=0

          for module_dir in terraform/modules/*/; do
            if [[ -d "$module_dir" ]]; then
              module_name=$(basename "$module_dir")
              echo "üìÑ Checking documentation for module: $module_name"
              
              # Check if README exists
              if [[ ! -f "$module_dir/README.md" ]]; then
                echo "‚ö†Ô∏è  Missing README.md in $module_name module"
                
                # Generate basic documentation
                echo "üìù Generating documentation for $module_name..."
                terraform-docs markdown table --output-file README.md "$module_dir"
                
                if [[ -f "$module_dir/README.md" ]]; then
                  echo "‚úÖ Generated README.md for $module_name"
                else
                  echo "‚ùå Failed to generate documentation for $module_name"
                  missing_docs=$((missing_docs + 1))
                fi
              else
                echo "‚úÖ Documentation exists for $module_name"
                
                # Update existing documentation
                terraform-docs markdown table --output-file README.md "$module_dir"
                echo "üîÑ Updated documentation for $module_name"
              fi
            fi
          done

          # Check if there are any uncommitted documentation changes
          if ! git diff --quiet; then
            echo "üìù Documentation updates available:"
            git diff --name-only
            echo ""
            echo "üí° Consider committing the updated documentation"
          fi

          if [ $missing_docs -eq 0 ]; then
            echo "‚úÖ All modules have proper documentation!"
          else
            echo "‚ö†Ô∏è  $missing_docs module(s) had missing documentation (now generated)"
          fi

  summary:
    name: Terraform Quality Summary
    runs-on: ubuntu-latest
    needs: [terraform-fmt, terraform-validate, tflint, terraform-security, terraform-docs]
    if: always()

    steps:
      - name: Summary report
        run: |
          echo "üìä Terraform Quality Report Summary"
          echo "==================================="

          echo "Format Check: ${{ needs.terraform-fmt.result }}"
          echo "Validation: ${{ needs.terraform-validate.result }}"
          echo "TFLint Analysis: ${{ needs.tflint.result }}"
          echo "Security Scan: ${{ needs.terraform-security.result }} (informational)"
          echo "Documentation: ${{ needs.terraform-docs.result }}"

          # Determine overall status (security scan is informational, so don't block on it)
          if [[ "${{ needs.terraform-fmt.result }}" == "success" && 
                "${{ needs.terraform-validate.result }}" == "success" && 
                "${{ needs.tflint.result }}" == "success" && 
                "${{ needs.terraform-docs.result }}" == "success" ]]; then
            echo "‚úÖ Overall Status: CORE CHECKS PASSED"
            echo "üéâ All essential Terraform quality checks passed!"
            echo "‚ÑπÔ∏è  Security scan findings are informational - review them for production hardening."
          else
            echo "‚ùå Overall Status: SOME CORE CHECKS FAILED"
            echo "üîß Please review and fix the core issues above"
            echo "‚ÑπÔ∏è  Note: Security scan is informational and does not affect this status"
            exit 1
          fi
